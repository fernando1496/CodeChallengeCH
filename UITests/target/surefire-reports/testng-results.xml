<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="6" passed="3" failed="1" skipped="2">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-10-04T06:10:18Z" name="Smoke test suite" finished-at="2022-10-04T06:11:22Z" duration-ms="63891">
    <groups>
    </groups>
    <test started-at="2022-10-04T06:10:18Z" name="Challenge test" finished-at="2022-10-04T06:11:08Z" duration-ms="49646">
      <class name="VerifyProductTest">
        <test-method is-config="true" signature="beforeEveryClass()[pri:0, instance:VerifyProductTest@32464a14]" started-at="2022-10-04T06:10:18Z" name="beforeEveryClass" finished-at="2022-10-04T06:10:25Z" duration-ms="6470" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEveryClass -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:VerifyProductTest@32464a14]" started-at="2022-10-04T06:10:25Z" name="beforeClass" finished-at="2022-10-04T06:10:25Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="SampleTestForChallenge(java.lang.reflect.Method)[pri:0, instance:VerifyProductTest@32464a14]" started-at="2022-10-04T06:10:25Z" name="SampleTestForChallenge" finished-at="2022-10-04T06:11:07Z" duration-ms="42715" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[private void VerifyProductTest.SampleTestForChallenge(java.lang.reflect.Method) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SampleTestForChallenge -->
        <test-method is-config="true" signature="afterEveryClass()[pri:0, instance:VerifyProductTest@32464a14]" started-at="2022-10-04T06:11:07Z" name="afterEveryClass" finished-at="2022-10-04T06:11:08Z" duration-ms="167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEveryClass -->
      </class> <!-- VerifyProductTest -->
    </test> <!-- Challenge test -->
    <test started-at="2022-10-04T06:11:08Z" name="Fail Test" finished-at="2022-10-04T06:11:15Z" duration-ms="7744">
      <class name="MockFailTest">
        <test-method is-config="true" signature="beforeEveryClass()[pri:0, instance:MockFailTest@120d6fe6]" started-at="2022-10-04T06:11:08Z" name="beforeEveryClass" finished-at="2022-10-04T06:11:15Z" duration-ms="6811" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEveryClass -->
        <test-method signature="SampleFailTestForReportOne(java.lang.reflect.Method)[pri:0, instance:MockFailTest@120d6fe6]" started-at="2022-10-04T06:11:15Z" name="SampleFailTestForReportOne" finished-at="2022-10-04T06:11:15Z" duration-ms="2" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[private void MockFailTest.SampleFailTestForReportOne(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at MockFailTest.SampleFailTestForReportOne(MockFailTest.java:21)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SampleFailTestForReportOne -->
        <test-method signature="SampleFailTestForReportOne(java.lang.reflect.Method)[pri:0, instance:MockFailTest@120d6fe6]" started-at="2022-10-04T06:11:15Z" name="SampleFailTestForReportOne" finished-at="2022-10-04T06:11:15Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[wrong number of arguments]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: wrong number of arguments
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.retryFailed(Invoker.java:839)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1010)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SampleFailTestForReportOne -->
        <test-method signature="SampleFailTestForReportTwo(java.lang.reflect.Method)[pri:0, instance:MockFailTest@120d6fe6]" started-at="2022-10-04T06:11:15Z" name="SampleFailTestForReportTwo" finished-at="2022-10-04T06:11:15Z" depends-on-methods="MockFailTest.SampleFailTestForReportOne" duration-ms="0" status="SKIP">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method MockFailTest.SampleFailTestForReportTwo(java.lang.reflect.Method)[pri:0, instance:MockFailTest@120d6fe6] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method MockFailTest.SampleFailTestForReportTwo(java.lang.reflect.Method)[pri:0, instance:MockFailTest@120d6fe6] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SampleFailTestForReportTwo -->
        <test-method is-config="true" signature="afterEveryClass()[pri:0, instance:MockFailTest@120d6fe6]" started-at="2022-10-04T06:11:15Z" name="afterEveryClass" finished-at="2022-10-04T06:11:15Z" duration-ms="97" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEveryClass -->
      </class> <!-- MockFailTest -->
    </test> <!-- Fail Test -->
    <test started-at="2022-10-04T06:11:16Z" name="Pass Test" finished-at="2022-10-04T06:11:22Z" duration-ms="6337">
      <class name="MockPassTest">
        <test-method is-config="true" signature="beforeEveryClass()[pri:0, instance:MockPassTest@5606c0b]" started-at="2022-10-04T06:11:16Z" name="beforeEveryClass" finished-at="2022-10-04T06:11:22Z" duration-ms="6235" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeEveryClass -->
        <test-method signature="SamplePassTestForReportOne(java.lang.reflect.Method)[pri:0, instance:MockPassTest@5606c0b]" started-at="2022-10-04T06:11:22Z" name="SamplePassTestForReportOne" finished-at="2022-10-04T06:11:22Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[private void MockPassTest.SamplePassTestForReportOne(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SamplePassTestForReportOne -->
        <test-method signature="SamplePassTestForReportTwo(java.lang.reflect.Method)[pri:0, instance:MockPassTest@5606c0b]" started-at="2022-10-04T06:11:22Z" name="SamplePassTestForReportTwo" finished-at="2022-10-04T06:11:22Z" depends-on-methods="MockPassTest.SamplePassTestForReportOne" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[private void MockPassTest.SamplePassTestForReportTwo(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SamplePassTestForReportTwo -->
        <test-method is-config="true" signature="afterEveryClass()[pri:0, instance:MockPassTest@5606c0b]" started-at="2022-10-04T06:11:22Z" name="afterEveryClass" finished-at="2022-10-04T06:11:22Z" duration-ms="100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEveryClass -->
      </class> <!-- MockPassTest -->
    </test> <!-- Pass Test -->
  </suite> <!-- Smoke test suite -->
</testng-results>
